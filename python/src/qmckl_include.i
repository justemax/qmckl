%constant qmckl_exit_code  QMCKL_SUCCESS                  = 0;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_1            = 1;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_2            = 2;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_3            = 3;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_4            = 4;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_5            = 5;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_6            = 6;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_7            = 7;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_8            = 8;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_9            = 9;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_10           = 10;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_11           = 11;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_12           = 12;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_13           = 13;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_14           = 14;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_15           = 15;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_16           = 16;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_17           = 17;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_18           = 18;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_19           = 19;
%constant qmckl_exit_code  QMCKL_INVALID_ARG_20           = 20;
%constant qmckl_exit_code  QMCKL_FAILURE                  = 101;
%constant qmckl_exit_code  QMCKL_ERRNO                    = 102;
%constant qmckl_exit_code  QMCKL_INVALID_CONTEXT          = 103;
%constant qmckl_exit_code  QMCKL_ALLOCATION_FAILED        = 104;
%constant qmckl_exit_code  QMCKL_DEALLOCATION_FAILED      = 105;
%constant qmckl_exit_code  QMCKL_NOT_PROVIDED             = 106;
%constant qmckl_exit_code  QMCKL_OUT_OF_BOUNDS            = 107;
%constant qmckl_exit_code  QMCKL_ALREADY_SET              = 108;
%constant qmckl_exit_code  QMCKL_INVALID_EXIT_CODE        = 109;
%apply int *OUTPUT { int64_t* const num };
%apply int *OUTPUT { int64_t* const num };
%apply float *OUTPUT { double* const rescale_factor_kappa };
%apply float *OUTPUT { double* const energy };
%apply int *OUTPUT { int64_t* const num };
%apply int *OUTPUT { int64_t* const up_num };
%apply int *OUTPUT { int64_t* const down_num };
%apply int *OUTPUT { int64_t* const walk_num };
%apply float *OUTPUT { double* const rescale_factor_kappa_ee };
%apply float *OUTPUT { double* const rescale_factor_kappa_en };
%apply float *OUTPUT { double* const distance };
%apply float *OUTPUT { double* const distance_rescaled };
%apply float *OUTPUT { double* const distance_rescaled_deriv_e };
%apply float *OUTPUT { double* const ee_potential };
%apply float *OUTPUT { double* distance };
%apply float *OUTPUT { double* distance_rescaled };
%apply float *OUTPUT { double* distance_rescaled_deriv_e };
%apply float *OUTPUT { double* const en_potential };
%apply int *OUTPUT { int64_t* const shell_num };
%apply int *OUTPUT { int64_t* const prim_num };
%apply int *OUTPUT { int64_t* const ao_num };
%apply int *OUTPUT { int64_t* mo_num };
%apply float *OUTPUT { double* const det_vgl_alpha };
%apply float *OUTPUT { double* const det_vgl_beta };
%apply float *OUTPUT { double* const det_inv_matrix_alpha };
%apply float *OUTPUT { double* const det_inv_matrix_beta };
%apply float *OUTPUT { double* const det_adj_matrix_alpha };
%apply float *OUTPUT { double* const det_adj_matrix_beta };
%apply float *OUTPUT { double* const det_adj_matrix_alpha };
%apply float *OUTPUT { double* const det_adj_matrix_beta };
%apply int *OUTPUT { int64_t* const aord_num };
%apply int *OUTPUT { int64_t* const bord_num };
%apply int *OUTPUT { int64_t* const bord_num };
%apply int *OUTPUT { int64_t* const type_nucl_num };
%apply int *OUTPUT { int64_t* const dim_cord_vect };
%apply float *OUTPUT { double* const cord_vect_full };
%apply int *OUTPUT { int64_t* const lkpm_combined_index };
%apply float *OUTPUT { double* const tmp_c };
%apply float *OUTPUT { double* const dtmp_c };
%apply int *OUTPUT { int device_id };
%apply int *OUTPUT { int device_id };
%apply int *OUTPUT { int device_id };
%apply int *OUTPUT { int device_id };
%apply float *OUTPUT { double* const kinetic_energy };
%apply float *OUTPUT { double* const potential_energy };
%apply float *OUTPUT { double* const drift_vector };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const coord,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* coord,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const charge,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const coord,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* charge,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* coord,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* distance,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* distance_rescaled,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const coord,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double* coord , const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double* coord , const int64_t size_max };
%apply ( int64_t* IN_ARRAY1 , int64_t DIM1 ) { (const int64_t* nucleus_shell_num,const int64_t size_max) };
%apply ( int64_t* IN_ARRAY1 , int64_t DIM1 ) { (const int64_t* nucleus_index,const int64_t size_max) };
%apply ( int32_t* IN_ARRAY1 , int64_t DIM1 ) { (const int32_t* shell_ang_mom,const int64_t size_max) };
%apply ( int64_t* IN_ARRAY1 , int64_t DIM1 ) { (const int64_t* shell_prim_num,const int64_t size_max) };
%apply ( int64_t* IN_ARRAY1 , int64_t DIM1 ) { (const int64_t* shell_prim_index,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* shell_factor,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* exponent,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* coefficient,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* prim_factor,const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { (const double* ao_factor,const int64_t size_max) };
%apply ( int64_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { (int64_t* const nucleus_shell_num,const int64_t size_max) };
%apply ( int64_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { (int64_t* const nucleus_index,const int64_t size_max) };
%apply ( int32_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { (int32_t* const shell_ang_mom,const int64_t size_max) };
%apply ( int64_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { (int64_t* const shell_prim_num,const int64_t size_max) };
%apply ( int64_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { (int64_t* const shell_prim_index,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double*  const shell_factor,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double*  const exponent,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double*  const coefficient,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double*  const prim_factor,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const ao_factor,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const primitive_vgl,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const shell_vgl,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const ao_vgl,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const ao_vgl,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const ao_value,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const ao_value,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const coefficient,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const mo_value,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const mo_value,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const mo_vgl,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const mo_vgl,const int64_t size_max) };
%apply ( int64_t* ARGOUT_ARRAY1 , int64_t DIM1 ) { ( int64_t* const type_nucl_num , const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { ( double * const aord_vector , const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { ( double * const bord_vector , const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { ( double * const cord_vector , const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * aord_vector , const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * bord_vector , const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * cord_vector , const int64_t size_max) };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * aord_vector , const int64_t size_max };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * bord_vector , const int64_t size_max };
%apply ( double* IN_ARRAY1 , int64_t DIM1 ) { ( const double * cord_vector , const int64_t size_max };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const asymp_jasb,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_ee,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_ee_deriv_e,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_en,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_en_deriv_e,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const distance_rescaled,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const distance_rescaled,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const distance_rescaled,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const distance_rescaled,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_een,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { (double* const factor_een_deriv_e,const int64_t size_max) };
%apply ( double* ARGOUT_ARRAY1 , int64_t DIM1 ) { ( double* const local_energy , const int64_t size_max) };
